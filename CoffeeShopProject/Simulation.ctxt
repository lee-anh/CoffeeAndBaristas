#BlueJ class context
comment0.target=Simulation
comment0.text=\r\n\ Class\ Simulation\ simulates\ the\ profit\ generated\ in\ a\ day\ at\ a\ coffee\ shop\r\n\r\n\ @author\ Claire\ Liu\r\n\ @version\ October\ 25,\ 2020\r\n
comment1.params=
comment1.target=Simulation()
comment1.text=\r\n\ Constructor\ for\ the\ Simulation\ class\r\n
comment10.params=customerNumber\ parsedTime
comment10.target=Customer\ addToCustomerRecords(int,\ java.time.LocalTime)
comment10.text=\r\n\ Helper\ method\ to\ readInput,\ adds\ new\ Customer\ to\ customerRecords\r\n\ @param\ \ customerNumber\ \ customer's\ number\r\n\ @param\ \ parsedTime\ \ the\ customer's\ arrival\ time\r\n\ @return\ the\ Customer\ created\r\n
comment11.params=
comment11.target=void\ runSim()
comment11.text=\r\n\ Runs\ the\ simulation\r\n
comment12.params=e
comment12.target=void\ departure(Event)
comment12.text=\r\n\ Process\ a\ customer\ departure\r\n\ \r\n\ @param\ \ e\ \ event\ to\ process\r\n
comment13.params=e
comment13.target=void\ arrival(Event)
comment13.text=\r\n\ Process\ a\ customer\ arrival\r\n\ \r\n\ @param\ \ e\ \ event\ to\ process\r\n
comment14.params=currentTime
comment14.target=void\ serve(java.time.LocalTime)
comment14.text=\r\n\ Serve\ a\ customer\r\n\ \r\n\ @param\ \ currentTime\ \ the\ time\ when\ the\ customer\ arrives\ at\ the\ counter\ to\ be\ served\r\n
comment15.params=e
comment15.target=int\ changeToDeparture(Event)
comment15.text=\r\n\ Helper\ method\ to\ serve,\ changes\ event\ type\ to\ a\ departure\r\n\ \r\n\ @param\ \ e\ \ Event\ to\ change\r\n\ @param\ \ 2\ (a\ departure)\ if\ change\ was\ sucessful\r\n
comment16.params=e
comment16.target=void\ calculateProfit(Event)
comment16.text=\r\n\ Helper\ method\ to\ serve,\ generates\ the\ profit\ from\ the\ customer\ and\ updates\ the\ program's\ records\r\n\ \r\n\ @param\ \ e\ \ event\ to\ process\r\n\ \r\n\ @return\ \ the\ profit,\ rounded\ to\ 2\ decimal\ places\r\n
comment17.params=
comment17.target=double\ generateProfit()
comment17.text=\r\n\ Helper\ Method\ to\ calculateProfit,\ generates\ the\ profit\ using\ ThreadLocalRandom\r\n\ \r\n\ @return\ \ the\ profit\r\n
comment18.params=e\ profitRounded
comment18.target=double\ updateCRProfit(Event,\ double)
comment18.text=\r\n\ Helper\ method\ to\ calculateProfit,\ updates\ the\ customerRecords\r\n\ @param\ \ e\ \ event\ to\ proces\r\n\ @param\ \ profitRounded\ \ profit\ generaged\ from\ generateProfit\r\n\ @return\ \ the\ profit\ from\ the\ customer\r\n
comment19.params=profitRounded
comment19.target=double\ updateTotalProfit(double)
comment19.text=\r\n\ Helper\ method\ to\ calculateProfit,\ updates\ the\ running\ total\ profit\r\n\ \r\n\ @param\ \ profitRounded\ \ the\ profit\ from\ a\ custmer\r\n\ @return\ \ the\ current\ TotalProfit\r\n
comment2.params=args
comment2.target=void\ main(java.lang.String[])
comment2.text=\r\n\ Main\ function\ \r\n\ \r\n\ @param\ \ args\ \ commandline\ arguements\ (none)\r\n
comment20.params=e
comment20.target=int\ calculateServingTime(Event)
comment20.text=\r\n\ Helper\ function\ to\ serve,\ generates\ how\ long\ it\ takes\ to\ serve\ a\ customer\r\n\ \r\n\ @param\ \ e\ \ event\ to\ process\r\n\ \r\n\ @return\ \ the\ serving\ time\ in\ seconds\r\n
comment21.params=e\ currentTime\ servingTime
comment21.target=java.time.LocalTime\ calculateDepartureTime(Event,\ java.time.LocalTime,\ int)
comment21.text=\r\n\ Helper\ function\ to\ serve,\ calculates\ the\ customer's\ departure\ time\r\n\ \r\n\ @param\ \ e\ \ event\ to\ process\r\n\ @param\ \ currentTime\ \ the\ time\ the\ customer\ walks\ up\ to\ the\ counter\ to\ be\ served\r\n\ @param\ \ servingTime\ \ the\ amount\ of\ time\ it\ takes\ to\ serve\ the\ customer\r\n\ @return\ the\ depatureTime\ from\ the\ Event\r\n
comment22.params=e
comment22.target=java.time.LocalTime\ updateCRDepartureTime(Event)
comment22.text=\r\n\ Helper\ function\ to\ calculateDepartureTime,\ updates\ customerRecords\ with\ departure\ time\r\n\ \r\n\ @param\ \ e\ \ event\ to\ process\r\n\ @return\ \ the\ departure\ time\ from\ customerRecords\r\n
comment23.params=e
comment23.target=int\ calculateHowLong(Event)
comment23.text=\r\n\ Helper\ function\ to\ serve,\ calculates\ how\ long\ a\ customer\ waited\ in\ line\ and\ to\ be\ served\r\n\ \r\n\ @param\ \ e\ \ event\ to\ process\r\n\ @return\ \ the\ total\ wait\ time\ in\ seconds\r\n
comment24.params=
comment24.target=int\ getTotalBaristas()
comment24.text=\r\n\ Helper\ method\ for\ unit\ testing,\ gets\ the\ number\ of\ baristas\ staffed\r\n\ @return\ the\ total\ baristas\r\n
comment25.params=
comment25.target=int\ getAvailibleBaristas()
comment25.text=\r\n\ Helper\ method\ for\ unit\ testing,\ gets\ the\ number\ of\ availible\ baristas\r\n\ @return\ number\ of\ availibleBaristas\r\n
comment26.params=i
comment26.target=int\ setAvailibleBaristas(int)
comment26.text=\r\n\ Helper\ method\ for\ unit\ testing,\ sets\ number\ of\ availible\ baristas\r\n\ @param\ \ i\ \ the\ number\ of\ availible\ baristas\r\n\ @return\ the\ number\ of\ availibleBaristas\r\n
comment27.params=x
comment27.target=double\ setBaristaCost(double)
comment27.text=\r\n\ Helper\ method\ for\ unit\ testing,\ sets\ the\ barista\ cost\r\n\ @param\ \ x\ \ the\ barista\ cost\r\n\ @return\ the\ baristaCost\r\n
comment28.params=i
comment28.target=int\ setTotalNumberOverflowed(int)
comment28.text=\r\n\ Helper\ method\ for\ unit\ testing,\ sets\ number\ overflowed\r\n\ @param\ \ i\ \ number\ overflowed\r\n\ @return\ \ TotalNumberOverflowed\r\n
comment29.params=x
comment29.target=double\ setTotalProfit(double)
comment29.text=\r\n\ Helper\ method\ for\ unit\ testing,\ sets\ totalProfit\r\n\ @param\ \ x\ \ profit\r\n\ @return\ total\ profit\r\n
comment3.params=
comment3.target=void\ run()
comment3.text=\r\n\ Run\ the\ simulation\r\n
comment30.params=c
comment30.target=Customer\ addToCR(Customer)
comment30.text=\r\n\ Helper\ method\ for\ unit\ testing,\ adds\ a\ customer\ to\ the\ customerRecords\r\n\ @param\ \ c\ \ customer\ to\ add\r\n\ @return\ the\ customer\ added\r\n
comment31.params=custNum
comment31.target=Customer\ getFromCR(int)
comment31.text=\r\n\ Helper\ method\ for\ unit\ testing,\ retrive\ a\ customer\ from\ customerRecords\r\n\ @param\ \ custNum\ \ the\ customer's\ number\r\n\ @return\ \ the\ customer\r\n
comment32.params=
comment32.target=Event\ pollEventSet()
comment32.text=\r\n\ Helper\ method\ for\ unit\ testing,\ polls\ eventSet\r\n\ @param\ event\ polled\r\n
comment33.params=
comment33.target=Event\ pollCustomerLine()
comment33.text=\r\n\ Helper\ method\ for\ unit\ testing,\ polls\ customerLine\r\n\ @param\ event\ polled\r\n
comment4.params=
comment4.target=float\ overflowRate()
comment4.text=\r\n\ Calculates\ custsomer\ overflow\ rate\ \r\n\ \r\n\ @return\ \ percentage\ of\ customers\ overflowed\r\n
comment5.params=
comment5.target=float\ averageTime()
comment5.text=\r\n\ Calulates\ the\ average\ time\ customers\ waited\r\n\ \r\n\ @return\ \ \ average\ time\ in\ seconds\ \r\n
comment6.params=
comment6.target=double\ netProfit()
comment6.text=\r\n\ Calculates\ the\ net\ profit\ \r\n\ \r\n\ @return\ \ the\ net\ profit\ \r\n
comment7.params=
comment7.target=int\ maxTime()
comment7.text=\r\n\ Finds\ maximum\ time\ a\ customer\ waited\r\n\ \r\n\ @return\ \ max\ time\ in\ seconds\r\n
comment8.params=
comment8.target=void\ readInput()
comment8.text=\r\n\ Reads\ input\ file\r\n
comment9.params=customerNumber\ parsedTime
comment9.target=Event\ processNewEvent(int,\ java.time.LocalTime)
comment9.text=\r\n\ Helper\ method\ to\ readInput,\ adds\ new\ Event\ to\ the\ eventSet\ PriorityQueue\r\n\ \r\n\ @param\ \ customerNumber\ \ customer's\ number\r\n\ @param\ \ parsedTime\ \ the\ customer's\ arrival\ time\r\n\ @return\ the\ Event\ created\r\n
numComments=34
